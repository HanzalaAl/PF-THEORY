PROBLEM 1 
//Syed Hanzala Ali 24K-0025
//Description: this code converts speed from kilometers to miles

//take speed in km/s as input from user
PRINT("Enter The value of speed in km/s: ")
INPUT speedkm

//Convert kilometers per second to meters per second.Multiply the speed by 1000
speedms = speedkm * 1000

//Convert meters per second to miles per hour.Multiply the speed by 2.237
speedmiles = speedms * 2.237

PRINT(speedmiles)

PROBLEM#2
//Syed Hanzala Ali 24K-0025
//Description: this code tells if a number is even or odd

//take a number input from user
PRINT("Enter A number:")
INPUT NUM

//check if the number is less than or equals to zero
   IF NUM <= 0 THEN:
      PRINT("Invalid input: Number must be positive")
      INPUT NUM 

// check if the number is divisible by 2 with remainder 0 . if yes than number is even . if no than number is odd
   ELSE IF NUM MOD 2 = 0 THEN:
      PRINT("Number is Even")
   ELSE 
      PRINT("Number is Odd")

PROBLEM#3
//Syed Hanzala Ali 24K-0025
//Description: this code tells whether a person is eligible to marry legally in Sindh or Punjab.

// take input of gender , province , age
PRINT ("Male or Female:")
PRINT ("Sindh or Punjab:")
PRINT ("what is the age:")
INPUT gender , age , province

//check marriage legality according to province
if province == "Sindh":
   if age < 18:
      PRINT ("Marriage is not legal")
   else:
      PRINT("Marriage is legal")
elseif province == "Punjab":
   //check gender and age for punjab
   if gender == "Female" AND age < 16:
      PRINT("Marriage is not legal")
   else
      PRINT("Marriage is legal")
   if gender == "Male" AND age < 18:
      PRINT("Marriage  is not legal")
   else:
      PRINT("Marriage is legal")
else:
    PRINT("Enter a valid province Sindh or Punjab:")

PROBLEM#4
//Syed Hanzala Ali 24K-0025
//Description: this code calculates the total price of fruits and vegetables bought by Mr.Bhoola

// take input for price of vegetables
INPUT price_onions 
INPUT price_grapes 
INPUT price_tomatoes 
INPUT price_apricots 

// Get the amount of money Mr. Bhoola has
PRINT "Enter the amount of money Mr. Bhoola has:"
INPUT money_available

// Initialize total cost
total_cost = 0

// Get the quantities of each item Mr. Bhoola buys
PRINT "Enter the quantity of onions (kg):"
INPUT onions_qty
total_cost = total_cost + (price_onions * onions_qty)

PRINT "Enter the quantity of grapes (kg):"
INPUT grapes_qty
total_cost = total_cost + (price_grapes * grapes_qty)

PRINT "Enter the quantity of tomatoes (kg):"
INPUT tomatoes_qty
total_cost = total_cost + (price_tomatoes * tomatoes_qty)

PRINT "Enter the quantity of apricots (kg):"
INPUT apricots_qty
total_cost = total_cost + (price_apricots * apricots_qty)

// Calculate the change Mr. Bhoola gets back
IF total_cost > money_available THEN
    PRINT "Mr. Bhoola does not have enough money!"
    PRINT "Total cost: " + total_cost
    PRINT "Money available: " + money_available
ELSE
    change = money_available - total_cost
    PRINT "Total cost: " + total_cost
    PRINT "Change to be returned: " + change

PROBLEM#5
//Syed Hanzala Ali 24K-0025
//Description: this code tells whether a crop needs irrigation or not

// Get the crop type (wheat, corn, or rice)
PRINT "Enter the type of crop (wheat, corn, or rice):"
INPUT crop_type

// Get the soil moisture level
PRINT "Enter the soil moisture percentage (%):"
INPUT soil_moisture

// Get the rainfall status for the last 24 hours (yes or no)
PRINT "Has it rained in the last 24 hours? (yes/no):"
INPUT rainfall

// Initialize irrigation status
irrigation_needed = false

// Check crop type and decide if irrigation is needed
IF crop_type == "wheat" THEN
    IF soil_moisture < 30 THEN
        IF rainfall == "no" THEN
            irrigation_needed = true
        ENDIF
    ENDIF

ELSE IF crop_type == "corn" THEN
    IF soil_moisture < 40 THEN
        irrigation_needed = true
    ENDIF

ELSE IF crop_type == "rice" THEN
    IF soil_moisture < 25 THEN I
        IF rainfall == "no" THEN
            irrigation_needed = true
        ENDIF
    ENDIF

ELSE
    PRINT "Invalid crop type."
ENDIF

// Output the irrigation decision
IF irrigation_needed == true THEN
    PRINT "Irrigation will be initiated."
ELSE
    PRINT "No irrigation is needed."
ENDIF

PROBLEM#6
//Syed Hanzala Ali 24K-0025
//Description: this code tells if a person is eligible for a particular ride at an Amusement Park

// Input: Visitor's height, age, and selected ride
INPUT height
INPUT age
INPUT ride

// Check selected ride
IF ride == "Dragon Roller Coaster" THEN
   IF height >= 48 AND age >= 10 THEN
        PRINT "Visitor can go on the Dragon Roller Coaster."
   ELSE
        PRINT "Visitor does not meet the requirements for the Dragon Roller Coaster."
   ENDIF

ELSE IF ride == "Sky Swing" THEN
      IF height >= 54 THEN
            PRINT "Visitor can go on the Sky Swing."
      ELSE
            PRINT "Visitor does not meet the height requirement for the Sky Swing."
      ENDIF

ELSE IF ride == "Carousel" THEN
      IF age >= 5 THEN
            PRINT "Visitor can go on the Carousel."
      ELSE
            PRINT "Visitor does not meet the age requirement for the Carousel."
      ENDIF

ELSE
        PRINT "Invalid ride selection."
ENDIF

PROBLEM#7
//Syed Hanzala Ali 24K-0025
//Description: this code tells the floor number on which the lift is currently on.

// Initialize variables
floorNumber = 0  // Stores the calculated floor number
INPUT binaryNumber
digit = binaryNumber  // Stores the current digit being processed

// Iterate through each digit of the 7-digit binary number
for i = 1 to 7:
  // Extract the value of the current digit (1 or 0)
  digitValue = (digit % 10) / 2

  // If the current digit is 1, add its corresponding value to the floor number
  if digitValue == 1:
    floorNumber = floorNumber + 2^(i-1)  // Calculate the value based on the digit's position

  // Move to the next digit
  digit = digit / 10

// Print the calculated floor number
PRINT floorNumber

PROBLEM#8
//Syed Hanzala Ali 24K-0025
//Description: this code calculates the sum of all the digits in a number

// Input A single number
INPUT number

// Initialize sum to 0
sum = 0

// If the number is negative, temporarily make it positive for digit extraction
IF number < 0 THEN
    number = -1 * number
ENDIF

// Loop to find each digit and add it to the sum
    WHILE number > 0 DO
        digit = number % 10      // Get the last digit of the number
        sum = sum + digit        // Add the digit to the sum
        number = number // 10    // Remove the last digit from the number
    ENDWHILE

// Output the sum of digits
    PRINT sum

PROBLEM#9
//Syed Hanzala Ali 24K-0025
//Description: this code calculate exact days months and years since birth till current date

//Get input for date of birth (DOB) and today's date
INPUT birthYear, birthMonth, birthDay
INPUT currentYear, currentMonth, currentDay

//Validate the dates
// Check if the month is valid (1 to 12)
IF birthMonth < 1 OR birthMonth > 12 OR currentMonth < 1 OR currentMonth > 12 THEN
   PRINT "Invalid month entered"
END IF

// Check if the day is valid for the month (taking leap year into account for February)
    IF birthMonth == 2 THEN
        IF (birthYear % 4 == 0 AND birthYear % 100 != 0) OR (birthYear % 400 == 0) THEN
            maxDays = 29  // Leap year
        ELSE
            maxDays = 28  // Non-leap year
        END IF
    ELSE IF birthMonth == 4 OR birthMonth == 6 OR birthMonth == 9 OR birthMonth == 11 THEN
        maxDays = 30  // April, June, September, November have 30 days
    ELSE
        maxDays = 31  // January, March, May, July, August, October, December have 31 days
    END IF

    IF birthDay < 1 OR birthDay > maxDays THEN
        PRINT "Invalid day entered"
    END IF

//Calculate the age in years, months, and days
    ageYears = currentYear - birthYear
    ageMonths = currentMonth - birthMonth
    ageDays = currentDay - birthDay

//Adjust if current month or day is less than birth month or day
    IF ageDays < 0 THEN
        ageMonths = ageMonths - 1
        // Adjust for the previous month's days
        IF currentMonth == 1 OR currentMonth == 3 OR currentMonth == 5 OR currentMonth == 7 OR currentMonth == 8 OR currentMonth == 10 OR currentMonth == 12 THEN
            ageDays = ageDays + 31
        ELSE IF currentMonth == 4 OR currentMonth == 6 OR currentMonth == 9 OR currentMonth == 11 THEN
            ageDays = ageDays + 30
        ELSE IF currentMonth == 2 THEN
            IF (currentYear % 4 == 0 AND currentYear % 100 != 0) OR (currentYear % 400 == 0) THEN
                ageDays = ageDays + 29  // Leap year
        ELSE
         ageDays = ageDays + 28  // Non-leap year
            END IF
      END IF
    END IF

    IF ageMonths < 0 THEN
        ageYears = ageYears - 1
        ageMonths = ageMonths + 12
    END IF

//Print the final age
    PRINT "Exact Age: ", ageYears, " years, ", ageMonths, " months, ", ageDays, " days"

PROBLEM#10
//Syed Hanzala Ali 24K-0025
//Description: this code is to fix Mr Bhoola's keyboard and remove the additional zero which was added due to fault

Input num
result = 0
count = 0

While num > 0 do
    If num % 100 == 90 then
        Digit = 9
        num = num / 100  //Skip the extra '0' after '9'
    Else 
        Digit = num % 10  //Get the last digit
        num = num / 10     //Remove the last digit

    result = result + (Digit * pow(10,count))  //Multiply by the power of 10 depending on the position
    count = count + 1

Print result


PROBLEM#11
//Syed Hanzala Ali 24K-0025
//Description: this code tells whether two numbers are coprime or not

//Input two whole numbers
INPUT num1, num2

//calculate GCD
WHILE num2 â‰  0 DO
   temp = num2
   num2 = num1 % num2 
   num1 = temp
END WHILE

//Check if the numbers are coprime
IF num1 == 1 THEN
   PRINT "The numbers are coprime."
ELSE
   PRINT "The numbers are not coprime."
END IF

PROBLEM#12
//Syed Hanzala Ali 24K-0025
//Description: this code solves the die hart jug problem

//Initialize the jugs
5L_jug = 0  // Current amount of water in the 5L jug
3L_jug = 0  // Current amount of water in the 3L jug

//Fill the 5L jug to the top
5L_jug = 5

//Pour water from the 5L jug into the 3L jug until the 3L jug is full
3L_jug = 5L_jug

//After the pour, the 3L jug is now full, and the 5L jug has 2 liters left (5 - 3 = 2)
//Empty the 3L jug
3L_jug = 0

//Pour the remaining water from the 5L jug into the 3L jug
3L_jug = 2  // Now the 3L jug has 2 liters

//Fill the 5L jug to the top again
5L_jug = 5

//Pour water from the 5L jug into the 3L jug until the 3L jug is full
WHILE 3L_jug < 3 DO
   3L_jug = 5L_jug
END WHILE

//Now, the 3L jug is full (3 liters), and the 5L jug will have 4 liters left (5 - 1 = 4)

//The required amount is now measured
   PRINT "Measured 4 liters in the 5L jug"

PROBLEM#13
//Syed Hanzala Ali 24K-0025
//Description: this is a generalized code for die hart jug problem

//Input capacities of two jugs and the target amount of water
INPUT: M (capacity of jug 1), N (capacity of jug 2), K (target amount)

// Check if it is possible to measure K liters using jugs of size M and N
// First, we need to calculate the GCD of M and N manually
a = M
b = N

WHILE b != 0 DO
   temp = b
   b = a MOD b
   a = temp
END WHILE
gcd = a  // This is the GCD of M and N

// Now, check if K is divisible by the gcd
IF K MOD gcd != 0 THEN
   PRINT "Not possible to measure K liters. gcd(M, N) does not divide K."      
END IF

//Check if the target amount is larger than both jugs
IF K > MAX(M, N) THEN
   PRINT "Not possible to measure K liters. K is greater than the capacity of the largest jug."
END IF

// If a solution exists, perform the water jug problem operations
// Two approaches: 
// 1. Fill the larger jug and pour into the smaller until the target is achieved
// 2. Fill the smaller jug and pour into the larger until the target is achieved
    
// Initialize jugs
jug1 = 0  // Start with jug1 empty
jug2 = 0  // Start with jug2 empty
    
PRINT "Start: Jug1 = 0 liters, Jug2 = 0 liters"
    
//Repeat the process until one of the jugs contains exactly K liters
WHILE jug1 != K AND jug2 != K DO
IF jug1 == 0 THEN
      // Fill jug1 from the water source
      jug1 = M
    PRINT "Fill jug1: Jug1 =", jug1, " liters, Jug2 =", jug2, " liters"
        
ELSE IF jug2 == N THEN
      // Empty jug2 into the water source
      jug2 = 0
    PRINT "Empty jug2: Jug1 =", jug1, " liters, Jug2 =", jug2, " liters"
        
ELSE
// Pour water from jug1 into jug2 until jug1 is empty or jug2 is full
   pourAmount = MIN(jug1, N - jug2)
   jug1 = jug1 - pourAmount
   jug2 = jug2 + pourAmount
   PRINT "Pour jug1 into jug2: Jug1 =", jug1, " liters, Jug2 =", jug2, " liters"
END IF
END WHILE
    
//Output result
PRINT "Success! Measured exactly ", K, " liters."

    
